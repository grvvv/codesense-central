/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AuthenticatedUsersNewRouteImport } from './routes/_authenticated/users/new'
import { Route as AuthenticatedUsersListRouteImport } from './routes/_authenticated/users/list'
import { Route as AuthenticatedLicenseNewRouteImport } from './routes/_authenticated/license/new'
import { Route as AuthenticatedLicenseListRouteImport } from './routes/_authenticated/license/list'
import { Route as AuthenticatedFindingFindingIdRouteImport } from './routes/_authenticated/finding/$findingId'
import { Route as AuthenticatedLicenseLicenseIdIndexRouteImport } from './routes/_authenticated/license/$licenseId/index'
import { Route as AuthenticatedUsersUserIdEditRouteImport } from './routes/_authenticated/users/$userId/edit'
import { Route as AuthenticatedLicenseLicenseIdEditRouteImport } from './routes/_authenticated/license/$licenseId/edit'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AuthenticatedUsersNewRoute = AuthenticatedUsersNewRouteImport.update({
  id: '/users/new',
  path: '/users/new',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedUsersListRoute = AuthenticatedUsersListRouteImport.update({
  id: '/users/list',
  path: '/users/list',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedLicenseNewRoute = AuthenticatedLicenseNewRouteImport.update({
  id: '/license/new',
  path: '/license/new',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedLicenseListRoute =
  AuthenticatedLicenseListRouteImport.update({
    id: '/license/list',
    path: '/license/list',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedFindingFindingIdRoute =
  AuthenticatedFindingFindingIdRouteImport.update({
    id: '/finding/$findingId',
    path: '/finding/$findingId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedLicenseLicenseIdIndexRoute =
  AuthenticatedLicenseLicenseIdIndexRouteImport.update({
    id: '/license/$licenseId/',
    path: '/license/$licenseId/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedUsersUserIdEditRoute =
  AuthenticatedUsersUserIdEditRouteImport.update({
    id: '/users/$userId/edit',
    path: '/users/$userId/edit',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedLicenseLicenseIdEditRoute =
  AuthenticatedLicenseLicenseIdEditRouteImport.update({
    id: '/license/$licenseId/edit',
    path: '/license/$licenseId/edit',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof AuthLoginRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/': typeof AuthenticatedIndexRoute
  '/finding/$findingId': typeof AuthenticatedFindingFindingIdRoute
  '/license/list': typeof AuthenticatedLicenseListRoute
  '/license/new': typeof AuthenticatedLicenseNewRoute
  '/users/list': typeof AuthenticatedUsersListRoute
  '/users/new': typeof AuthenticatedUsersNewRoute
  '/license/$licenseId/edit': typeof AuthenticatedLicenseLicenseIdEditRoute
  '/users/$userId/edit': typeof AuthenticatedUsersUserIdEditRoute
  '/license/$licenseId': typeof AuthenticatedLicenseLicenseIdIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLoginRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/': typeof AuthenticatedIndexRoute
  '/finding/$findingId': typeof AuthenticatedFindingFindingIdRoute
  '/license/list': typeof AuthenticatedLicenseListRoute
  '/license/new': typeof AuthenticatedLicenseNewRoute
  '/users/list': typeof AuthenticatedUsersListRoute
  '/users/new': typeof AuthenticatedUsersNewRoute
  '/license/$licenseId/edit': typeof AuthenticatedLicenseLicenseIdEditRoute
  '/users/$userId/edit': typeof AuthenticatedUsersUserIdEditRoute
  '/license/$licenseId': typeof AuthenticatedLicenseLicenseIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/finding/$findingId': typeof AuthenticatedFindingFindingIdRoute
  '/_authenticated/license/list': typeof AuthenticatedLicenseListRoute
  '/_authenticated/license/new': typeof AuthenticatedLicenseNewRoute
  '/_authenticated/users/list': typeof AuthenticatedUsersListRoute
  '/_authenticated/users/new': typeof AuthenticatedUsersNewRoute
  '/_authenticated/license/$licenseId/edit': typeof AuthenticatedLicenseLicenseIdEditRoute
  '/_authenticated/users/$userId/edit': typeof AuthenticatedUsersUserIdEditRoute
  '/_authenticated/license/$licenseId/': typeof AuthenticatedLicenseLicenseIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/profile'
    | '/'
    | '/finding/$findingId'
    | '/license/list'
    | '/license/new'
    | '/users/list'
    | '/users/new'
    | '/license/$licenseId/edit'
    | '/users/$userId/edit'
    | '/license/$licenseId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/profile'
    | '/'
    | '/finding/$findingId'
    | '/license/list'
    | '/license/new'
    | '/users/list'
    | '/users/new'
    | '/license/$licenseId/edit'
    | '/users/$userId/edit'
    | '/license/$licenseId'
  id:
    | '__root__'
    | '/_auth'
    | '/_authenticated'
    | '/_auth/login'
    | '/_authenticated/profile'
    | '/_authenticated/'
    | '/_authenticated/finding/$findingId'
    | '/_authenticated/license/list'
    | '/_authenticated/license/new'
    | '/_authenticated/users/list'
    | '/_authenticated/users/new'
    | '/_authenticated/license/$licenseId/edit'
    | '/_authenticated/users/$userId/edit'
    | '/_authenticated/license/$licenseId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_authenticated/users/new': {
      id: '/_authenticated/users/new'
      path: '/users/new'
      fullPath: '/users/new'
      preLoaderRoute: typeof AuthenticatedUsersNewRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/users/list': {
      id: '/_authenticated/users/list'
      path: '/users/list'
      fullPath: '/users/list'
      preLoaderRoute: typeof AuthenticatedUsersListRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/license/new': {
      id: '/_authenticated/license/new'
      path: '/license/new'
      fullPath: '/license/new'
      preLoaderRoute: typeof AuthenticatedLicenseNewRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/license/list': {
      id: '/_authenticated/license/list'
      path: '/license/list'
      fullPath: '/license/list'
      preLoaderRoute: typeof AuthenticatedLicenseListRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/finding/$findingId': {
      id: '/_authenticated/finding/$findingId'
      path: '/finding/$findingId'
      fullPath: '/finding/$findingId'
      preLoaderRoute: typeof AuthenticatedFindingFindingIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/license/$licenseId/': {
      id: '/_authenticated/license/$licenseId/'
      path: '/license/$licenseId'
      fullPath: '/license/$licenseId'
      preLoaderRoute: typeof AuthenticatedLicenseLicenseIdIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/users/$userId/edit': {
      id: '/_authenticated/users/$userId/edit'
      path: '/users/$userId/edit'
      fullPath: '/users/$userId/edit'
      preLoaderRoute: typeof AuthenticatedUsersUserIdEditRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/license/$licenseId/edit': {
      id: '/_authenticated/license/$licenseId/edit'
      path: '/license/$licenseId/edit'
      fullPath: '/license/$licenseId/edit'
      preLoaderRoute: typeof AuthenticatedLicenseLicenseIdEditRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedFindingFindingIdRoute: typeof AuthenticatedFindingFindingIdRoute
  AuthenticatedLicenseListRoute: typeof AuthenticatedLicenseListRoute
  AuthenticatedLicenseNewRoute: typeof AuthenticatedLicenseNewRoute
  AuthenticatedUsersListRoute: typeof AuthenticatedUsersListRoute
  AuthenticatedUsersNewRoute: typeof AuthenticatedUsersNewRoute
  AuthenticatedLicenseLicenseIdEditRoute: typeof AuthenticatedLicenseLicenseIdEditRoute
  AuthenticatedUsersUserIdEditRoute: typeof AuthenticatedUsersUserIdEditRoute
  AuthenticatedLicenseLicenseIdIndexRoute: typeof AuthenticatedLicenseLicenseIdIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedFindingFindingIdRoute: AuthenticatedFindingFindingIdRoute,
  AuthenticatedLicenseListRoute: AuthenticatedLicenseListRoute,
  AuthenticatedLicenseNewRoute: AuthenticatedLicenseNewRoute,
  AuthenticatedUsersListRoute: AuthenticatedUsersListRoute,
  AuthenticatedUsersNewRoute: AuthenticatedUsersNewRoute,
  AuthenticatedLicenseLicenseIdEditRoute:
    AuthenticatedLicenseLicenseIdEditRoute,
  AuthenticatedUsersUserIdEditRoute: AuthenticatedUsersUserIdEditRoute,
  AuthenticatedLicenseLicenseIdIndexRoute:
    AuthenticatedLicenseLicenseIdIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
