/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedSettingsRouteImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedAboutRouteImport } from './routes/_authenticated/about'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AuthenticatedUsersNewRouteImport } from './routes/_authenticated/users/new'
import { Route as AuthenticatedUsersListRouteImport } from './routes/_authenticated/users/list'
import { Route as AuthenticatedScanStartRouteImport } from './routes/_authenticated/scan/start'
import { Route as AuthenticatedProjectNewRouteImport } from './routes/_authenticated/project/new'
import { Route as AuthenticatedProjectListRouteImport } from './routes/_authenticated/project/list'
import { Route as AuthenticatedScanScanIdRouteRouteImport } from './routes/_authenticated/scan/$scanId/route'
import { Route as AuthenticatedScanScanIdIndexRouteImport } from './routes/_authenticated/scan/$scanId/index'
import { Route as AuthenticatedProjectProjectIdIndexRouteImport } from './routes/_authenticated/project/$projectId/index'
import { Route as AuthenticatedScanScanIdUpdatesRouteImport } from './routes/_authenticated/scan/$scanId/updates'
import { Route as AuthenticatedScanScanIdFindingsRouteImport } from './routes/_authenticated/scan/$scanId/findings'
import { Route as AuthenticatedProjectProjectIdEditRouteImport } from './routes/_authenticated/project/$projectId/edit'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSettingsRoute = AuthenticatedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAboutRoute = AuthenticatedAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AuthenticatedUsersNewRoute = AuthenticatedUsersNewRouteImport.update({
  id: '/users/new',
  path: '/users/new',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedUsersListRoute = AuthenticatedUsersListRouteImport.update({
  id: '/users/list',
  path: '/users/list',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedScanStartRoute = AuthenticatedScanStartRouteImport.update({
  id: '/scan/start',
  path: '/scan/start',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProjectNewRoute = AuthenticatedProjectNewRouteImport.update({
  id: '/project/new',
  path: '/project/new',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProjectListRoute =
  AuthenticatedProjectListRouteImport.update({
    id: '/project/list',
    path: '/project/list',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedScanScanIdRouteRoute =
  AuthenticatedScanScanIdRouteRouteImport.update({
    id: '/scan/$scanId',
    path: '/scan/$scanId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedScanScanIdIndexRoute =
  AuthenticatedScanScanIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedScanScanIdRouteRoute,
  } as any)
const AuthenticatedProjectProjectIdIndexRoute =
  AuthenticatedProjectProjectIdIndexRouteImport.update({
    id: '/project/$projectId/',
    path: '/project/$projectId/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedScanScanIdUpdatesRoute =
  AuthenticatedScanScanIdUpdatesRouteImport.update({
    id: '/updates',
    path: '/updates',
    getParentRoute: () => AuthenticatedScanScanIdRouteRoute,
  } as any)
const AuthenticatedScanScanIdFindingsRoute =
  AuthenticatedScanScanIdFindingsRouteImport.update({
    id: '/findings',
    path: '/findings',
    getParentRoute: () => AuthenticatedScanScanIdRouteRoute,
  } as any)
const AuthenticatedProjectProjectIdEditRoute =
  AuthenticatedProjectProjectIdEditRouteImport.update({
    id: '/project/$projectId/edit',
    path: '/project/$projectId/edit',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof AuthLoginRoute
  '/about': typeof AuthenticatedAboutRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/': typeof AuthenticatedIndexRoute
  '/scan/$scanId': typeof AuthenticatedScanScanIdRouteRouteWithChildren
  '/project/list': typeof AuthenticatedProjectListRoute
  '/project/new': typeof AuthenticatedProjectNewRoute
  '/scan/start': typeof AuthenticatedScanStartRoute
  '/users/list': typeof AuthenticatedUsersListRoute
  '/users/new': typeof AuthenticatedUsersNewRoute
  '/project/$projectId/edit': typeof AuthenticatedProjectProjectIdEditRoute
  '/scan/$scanId/findings': typeof AuthenticatedScanScanIdFindingsRoute
  '/scan/$scanId/updates': typeof AuthenticatedScanScanIdUpdatesRoute
  '/project/$projectId': typeof AuthenticatedProjectProjectIdIndexRoute
  '/scan/$scanId/': typeof AuthenticatedScanScanIdIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLoginRoute
  '/about': typeof AuthenticatedAboutRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/': typeof AuthenticatedIndexRoute
  '/project/list': typeof AuthenticatedProjectListRoute
  '/project/new': typeof AuthenticatedProjectNewRoute
  '/scan/start': typeof AuthenticatedScanStartRoute
  '/users/list': typeof AuthenticatedUsersListRoute
  '/users/new': typeof AuthenticatedUsersNewRoute
  '/project/$projectId/edit': typeof AuthenticatedProjectProjectIdEditRoute
  '/scan/$scanId/findings': typeof AuthenticatedScanScanIdFindingsRoute
  '/scan/$scanId/updates': typeof AuthenticatedScanScanIdUpdatesRoute
  '/project/$projectId': typeof AuthenticatedProjectProjectIdIndexRoute
  '/scan/$scanId': typeof AuthenticatedScanScanIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_authenticated/about': typeof AuthenticatedAboutRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/scan/$scanId': typeof AuthenticatedScanScanIdRouteRouteWithChildren
  '/_authenticated/project/list': typeof AuthenticatedProjectListRoute
  '/_authenticated/project/new': typeof AuthenticatedProjectNewRoute
  '/_authenticated/scan/start': typeof AuthenticatedScanStartRoute
  '/_authenticated/users/list': typeof AuthenticatedUsersListRoute
  '/_authenticated/users/new': typeof AuthenticatedUsersNewRoute
  '/_authenticated/project/$projectId/edit': typeof AuthenticatedProjectProjectIdEditRoute
  '/_authenticated/scan/$scanId/findings': typeof AuthenticatedScanScanIdFindingsRoute
  '/_authenticated/scan/$scanId/updates': typeof AuthenticatedScanScanIdUpdatesRoute
  '/_authenticated/project/$projectId/': typeof AuthenticatedProjectProjectIdIndexRoute
  '/_authenticated/scan/$scanId/': typeof AuthenticatedScanScanIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/about'
    | '/profile'
    | '/settings'
    | '/'
    | '/scan/$scanId'
    | '/project/list'
    | '/project/new'
    | '/scan/start'
    | '/users/list'
    | '/users/new'
    | '/project/$projectId/edit'
    | '/scan/$scanId/findings'
    | '/scan/$scanId/updates'
    | '/project/$projectId'
    | '/scan/$scanId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/about'
    | '/profile'
    | '/settings'
    | '/'
    | '/project/list'
    | '/project/new'
    | '/scan/start'
    | '/users/list'
    | '/users/new'
    | '/project/$projectId/edit'
    | '/scan/$scanId/findings'
    | '/scan/$scanId/updates'
    | '/project/$projectId'
    | '/scan/$scanId'
  id:
    | '__root__'
    | '/_auth'
    | '/_authenticated'
    | '/_auth/login'
    | '/_authenticated/about'
    | '/_authenticated/profile'
    | '/_authenticated/settings'
    | '/_authenticated/'
    | '/_authenticated/scan/$scanId'
    | '/_authenticated/project/list'
    | '/_authenticated/project/new'
    | '/_authenticated/scan/start'
    | '/_authenticated/users/list'
    | '/_authenticated/users/new'
    | '/_authenticated/project/$projectId/edit'
    | '/_authenticated/scan/$scanId/findings'
    | '/_authenticated/scan/$scanId/updates'
    | '/_authenticated/project/$projectId/'
    | '/_authenticated/scan/$scanId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/about': {
      id: '/_authenticated/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AuthenticatedAboutRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_authenticated/users/new': {
      id: '/_authenticated/users/new'
      path: '/users/new'
      fullPath: '/users/new'
      preLoaderRoute: typeof AuthenticatedUsersNewRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/users/list': {
      id: '/_authenticated/users/list'
      path: '/users/list'
      fullPath: '/users/list'
      preLoaderRoute: typeof AuthenticatedUsersListRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/scan/start': {
      id: '/_authenticated/scan/start'
      path: '/scan/start'
      fullPath: '/scan/start'
      preLoaderRoute: typeof AuthenticatedScanStartRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/project/new': {
      id: '/_authenticated/project/new'
      path: '/project/new'
      fullPath: '/project/new'
      preLoaderRoute: typeof AuthenticatedProjectNewRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/project/list': {
      id: '/_authenticated/project/list'
      path: '/project/list'
      fullPath: '/project/list'
      preLoaderRoute: typeof AuthenticatedProjectListRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/scan/$scanId': {
      id: '/_authenticated/scan/$scanId'
      path: '/scan/$scanId'
      fullPath: '/scan/$scanId'
      preLoaderRoute: typeof AuthenticatedScanScanIdRouteRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/scan/$scanId/': {
      id: '/_authenticated/scan/$scanId/'
      path: '/'
      fullPath: '/scan/$scanId/'
      preLoaderRoute: typeof AuthenticatedScanScanIdIndexRouteImport
      parentRoute: typeof AuthenticatedScanScanIdRouteRoute
    }
    '/_authenticated/project/$projectId/': {
      id: '/_authenticated/project/$projectId/'
      path: '/project/$projectId'
      fullPath: '/project/$projectId'
      preLoaderRoute: typeof AuthenticatedProjectProjectIdIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/scan/$scanId/updates': {
      id: '/_authenticated/scan/$scanId/updates'
      path: '/updates'
      fullPath: '/scan/$scanId/updates'
      preLoaderRoute: typeof AuthenticatedScanScanIdUpdatesRouteImport
      parentRoute: typeof AuthenticatedScanScanIdRouteRoute
    }
    '/_authenticated/scan/$scanId/findings': {
      id: '/_authenticated/scan/$scanId/findings'
      path: '/findings'
      fullPath: '/scan/$scanId/findings'
      preLoaderRoute: typeof AuthenticatedScanScanIdFindingsRouteImport
      parentRoute: typeof AuthenticatedScanScanIdRouteRoute
    }
    '/_authenticated/project/$projectId/edit': {
      id: '/_authenticated/project/$projectId/edit'
      path: '/project/$projectId/edit'
      fullPath: '/project/$projectId/edit'
      preLoaderRoute: typeof AuthenticatedProjectProjectIdEditRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface AuthenticatedScanScanIdRouteRouteChildren {
  AuthenticatedScanScanIdFindingsRoute: typeof AuthenticatedScanScanIdFindingsRoute
  AuthenticatedScanScanIdUpdatesRoute: typeof AuthenticatedScanScanIdUpdatesRoute
  AuthenticatedScanScanIdIndexRoute: typeof AuthenticatedScanScanIdIndexRoute
}

const AuthenticatedScanScanIdRouteRouteChildren: AuthenticatedScanScanIdRouteRouteChildren =
  {
    AuthenticatedScanScanIdFindingsRoute: AuthenticatedScanScanIdFindingsRoute,
    AuthenticatedScanScanIdUpdatesRoute: AuthenticatedScanScanIdUpdatesRoute,
    AuthenticatedScanScanIdIndexRoute: AuthenticatedScanScanIdIndexRoute,
  }

const AuthenticatedScanScanIdRouteRouteWithChildren =
  AuthenticatedScanScanIdRouteRoute._addFileChildren(
    AuthenticatedScanScanIdRouteRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedAboutRoute: typeof AuthenticatedAboutRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedScanScanIdRouteRoute: typeof AuthenticatedScanScanIdRouteRouteWithChildren
  AuthenticatedProjectListRoute: typeof AuthenticatedProjectListRoute
  AuthenticatedProjectNewRoute: typeof AuthenticatedProjectNewRoute
  AuthenticatedScanStartRoute: typeof AuthenticatedScanStartRoute
  AuthenticatedUsersListRoute: typeof AuthenticatedUsersListRoute
  AuthenticatedUsersNewRoute: typeof AuthenticatedUsersNewRoute
  AuthenticatedProjectProjectIdEditRoute: typeof AuthenticatedProjectProjectIdEditRoute
  AuthenticatedProjectProjectIdIndexRoute: typeof AuthenticatedProjectProjectIdIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAboutRoute: AuthenticatedAboutRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedScanScanIdRouteRoute:
    AuthenticatedScanScanIdRouteRouteWithChildren,
  AuthenticatedProjectListRoute: AuthenticatedProjectListRoute,
  AuthenticatedProjectNewRoute: AuthenticatedProjectNewRoute,
  AuthenticatedScanStartRoute: AuthenticatedScanStartRoute,
  AuthenticatedUsersListRoute: AuthenticatedUsersListRoute,
  AuthenticatedUsersNewRoute: AuthenticatedUsersNewRoute,
  AuthenticatedProjectProjectIdEditRoute:
    AuthenticatedProjectProjectIdEditRoute,
  AuthenticatedProjectProjectIdIndexRoute:
    AuthenticatedProjectProjectIdIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
